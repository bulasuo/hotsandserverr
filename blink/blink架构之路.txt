#define ***		重要且当前要完成
#define  **		次重要,但已经完成
#define ***<*	重要,且后期要去完成
#define #link?,	见第?条
#define c端		请求端

0.*** 服务器的设计规范:
	1) 

1.***用户注册只记录密码的MD5值<由于MD5的不可逆性 即使密码被盗,也不可能知道用户的原密码.>.

2.***client 对服务器每一次的请求必需带上userId和password(MD5)
这样可以防止没有权限的user操作其他user的数据<后期userId 可以写成服务器号+userid 为以后的服务器集群做准备!>

3.***如果请求是公开资源 可不用带上userId和password.

4.***对于需要权限的请求先到服务器查询id-password是否正确,否则到数据库查询,正确后把id-password保存到服务器运行环境下.
减轻数据库压力,<后期应该把这些id-password键值对保存到单独一个服务器<必要时这个服务器还应该是多个的,并且要及时做复制,减轻这个业务逻辑的压力>,因为对他们的查询比较频繁.>

5.**数据库表的设计要遵循 三个范式,表之间的副键可以在数据库就把数据的完整性验证了. 并且在表有唯一id的时候要设置改id唯一索引.

6.**对数据库的操作现在是直接服务器用sql直接操作数据库的,<后期应该是数据库与服务器权限分离,服务器只能通过数据库写好的存储过程来操作数据,并且要 提供权限即数据库用户,和数据权限:userId-password>在这里我们先简单点,但是还是要保证数据权限的安全#link2,3,

7.***<*对于c端的请求要做第一层过滤,防止恶意攻击,即做成网关,此时这个网关就是&link4,所说的键值对服务器.并且该网关还应该具备以下功能:
	1) 对请求要求有设备标识,要求记录ip,并且对改tags的请求做超频率过滤,且给返回原因.
	2) 满足第一条后,对需要数据权限的要对id-password键值对查询,权限是否合法.
	3) 把该请求转到适当的服务器,<集群所用>,#link0,4,服务器应该给网关传自己的服务器id

8.**服务器对数据库操作后,数据库的错误码应该反馈给服务器,服务器为了好调试应该传递给c端

9.***服务器应该做进程crash日志抓取并且邮件发送给developer. 并且要及时自动重启服务器. 先重启再发邮件.

10.***每个对数据库操作dao层的方法都要经过id-password合法性验证



PS:基于1-10,目前数据库的安全性完全取决于服务端所持有的数据库的用户密码,并且 服务器要做数据的操作权限管理

final
	其实这些应该画个关系图的,但是目前这个图的必要性小于时间重要性,我就偷懒一下啦